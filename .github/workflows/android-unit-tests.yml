# This is a basic workflow to help you get started with Actions

name: Android Unit Tests

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: Run Android Unit Test
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Setup JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # Step 3: Cachec gradle dependencies
      - name: Ceche gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle
      
      # Step 4: Setup Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 35
          build-tools: 35.0.0 # Adjust based on your project
          cache: true
      
      # Step 5: Run Unit Tests  
      - name: Run Unit Tests
        run: ./gradlew testDebugUnitTest

    
      # Step 6: Optional and disabled
      # - name: Upload Test Results
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: test-results
      #     path: app/build/test-results      
